一、ShipAny 是什么
ShipAny 是一个基于 NextJS 的 AI SaaS 开发框架，内置丰富的组件和 AI SDK，帮助你快速完成 AI SaaS 项目开发。

ShipAny 框架包含哪些功能
核心功能

 一个精美的 Landing Page
 20+ 页面组件
 用户登录（谷歌登录 / Github 登录）
 数据统计（Google Analytics / OpenPanel）
 i18n 多语言
 数据存储（基于 Supabase）
 支付（基于 Stripe）
 部署（支持 Vercel / Cloudflare）
管理后台

 用户管理
 用户积分管理
 支付订单管理
 API Keys 管理
 CMS（内容管理系统）
AI SDK

 可灵 AI 视频生成
 Dall-E 图片生成
 OpenAI Chat Completion
 OpenAI TTS
其他需求可以在 Github Issues 提交，按优先级支持。

技术依赖
ShipAny 基于 NextJS 框架构建，用到了诸多流行的技术组件和云服务。

为确保你能充分使用 ShipAny 的完整功能，请自行熟悉以下技术/组件或云服务：

技术/组件

NextJS 全栈开发框架
TailwindCSS CSS 样式框架
Shadcn/UI UI 组件库
next-intl i18n 多语言
next-auth 登录鉴权
云服务

Supabase 云数据库
Stripe 支付收款平台
Google Analytics 数据统计
OpenPanel 数据统计
环境依赖
为确保你能顺利在本地运行和二次开发 ShipAny，请在你的电脑上安装必要的环境。

以下为 Mac 系统开发的环境配置建议：

使用 fnm 进行 NodeJS 版本管理
推荐使用以下版本的 NodeJS 和 npm：

$ node -v
v22.2.0
 
$ npm -v
10.7.0
使用 pnpm 进行包管理
全局安装 pnpm：

$ npm install -g pnpm
推荐使用以下版本的 pnpm：

$ pnpm -v
9.15.0
安装 git 并配置 ssh key，确保能访问你的 Github 仓库
$ git --version
git version 2.39.3 (Apple Git-146)
其他操作系统，请自行搜索对应的环境配置方法。运行 ShipAny 代码之前，请确保你的电脑环境已经安装了 nodejs 和 pnpm。


二、快速开始使用指引
拉取项目代码
进入 ShipAny 代码仓库（如果未加入仓库，打开会是 404）
https://github.com/shipanyai/shipany-template-one

选择 git clone 的方式，或者直接下载源代码到你的本地电脑
ssh-clone-project

Terminal

git clone git@github.com:shipanyai/shipany-template-one.git my-shipany-project
安装项目
进入项目根目录
Terminal

cd my-shipany-project
安装项目依赖
Terminal

pnpm install
开发调试
复制环境变量配置文件
Terminal

cp .env.example .env.development
启动开发服务器
Terminal

pnpm dev
pnpm-dev

本地预览
在浏览器打开 http://localhost:3000 ，即可预览你的项目

preview

定制化修改
修改网页配色
选择一个 shadcn 主题调试器
shadcn themes
shadcn-ui-theme-generator
为你的项目调制一套主题配色：
theme-generator

复制主题样式，粘贴到项目文件：app/theme.css
theme-css

重新进入项目预览页面，即可看到你定制的主题
theme-preview

修改落地页内容
打开落地页内容文件，AI 辅助生成新的落地页内容
update-landing

应用 AI 生成的新落地页内容，人工稍加调整，重新预览新的落地页
new-landing

继续调整 i18n/pages/landing 下的其他 json 文件，使网页显示的内容跟你的项目相符。
修改多语言文案
在 i18n/messages 目录下，通过 [locale].json 文件配置页面内容，默认支持中文和英文，在 i18n/messages/ 目录下，可以看到 en.json 和 zh.json 两个文件，在项目发布之前，修改成跟你项目相符合的文案即可。

可以让 AI 辅助生成内容：

Prompt

update content of this file, for my new project "Flux AI", which is an AI Image Generator, with keywords "flux ai, ai image generator"
i18n-message

修改网站协议
在网站正式上线之前，请根据你网站提供的服务，更新 app/(legal) 目录下的网站协议。

更新隐私政策
在 Cursor 中，通过提示词生成新的隐私政策内容。

Prompt

update privacy-policy according to landing page content @en.json
with brand name "ShipAny", domain "shipany.ai", contact email is "support@shipany.ai"
替换 app/(legal)/privacy-policy/page.mdx 文件中的内容，更新隐私政策。

update-privacy

更新服务条款
在 Cursor 中，通过提示词生成新的服务条款内容。

Prompt

update terms-of-service according to landing page content @en.json
with brand name "ShipAny", domain "shipany.ai", contact email is "support@shipany.ai"
替换 app/(legal)/terms-of-service/page.mdx 文件中的内容，更新服务条款。

update-terms

修改环境变量
根据实际需求，修改环境变量，开启数据存储 / 登录 / 数据统计 / 支付等功能

Terminal

# -----------------------------------------------------------------------------
# Web Information
# -----------------------------------------------------------------------------
NEXT_PUBLIC_WEB_URL = "http://localhost:3000"
NEXT_PUBLIC_PROJECT_NAME = "ShipAny"
 
# -----------------------------------------------------------------------------
# Database with Supabase
# -----------------------------------------------------------------------------
# https://supabase.com/docs/guides/getting-started/quickstarts/nextjs
# Set your Supabase URL and Anon Key
SUPABASE_URL = ""
SUPABASE_ANON_KEY = ""
 
# -----------------------------------------------------------------------------
# Auth with next-auth
# https://authjs.dev/getting-started/installation?framework=Next.js
# Set your Auth URL and Secret
# Secret can be generated with `openssl rand -base64 32`
# -----------------------------------------------------------------------------
AUTH_SECRET = ""
 
# Google Auth
# https://authjs.dev/getting-started/providers/google
AUTH_GOOGLE_ID = ""
AUTH_GOOGLE_SECRET = ""
NEXT_PUBLIC_AUTH_GOOGLE_ENABLED = "false"
NEXT_PUBLIC_AUTH_GOOGLE_ONE_TAP_ENABLED = "false"
 
# Github Auth
# https://authjs.dev/getting-started/providers/github
AUTH_GITHUB_ID = ""
AUTH_GITHUB_SECRET = ""
NEXT_PUBLIC_AUTH_GITHUB_ENABLED = "false"
 
# -----------------------------------------------------------------------------
# Analytics with Google Analytics
# https://analytics.google.com
# -----------------------------------------------------------------------------
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID = ""
 
# -----------------------------------------------------------------------------
# Analytics with OpenPanel
# https://openpanel.dev
# -----------------------------------------------------------------------------
NEXT_PUBLIC_OPENPANEL_CLIENT_ID = ""
 
# -----------------------------------------------------------------------------
# Payment with Stripe
# https://docs.stripe.com/keys
# -----------------------------------------------------------------------------
STRIPE_PUBLIC_KEY = ""
STRIPE_PRIVATE_KEY = ""
 
NEXT_PUBLIC_PAY_SUCCESS_URL = "http://localhost:3000/my-orders"
NEXT_PUBLIC_PAY_CANCEL_URL = "http://localhost:3000/#pricing"
发布上线
创建 Github 仓库
请务必选择私有仓库，不要公开发布 ShipAny 的代码，拒绝盗版。

create-project

将修改后的项目代码，提交到项目 Github 仓库
Terminal

git remote set-url origin https://github.com/your-username/your-project-name.git
git add .
git commit -m "update landing page"
git push origin main
git-commit

在 Vercel 控制台创建新项目，导入代码仓库，一键部署
vercel-new-project

等构建完成，即可在 Vercel 控制台看到你的项目
vercel-console

打开域名，即可访问你的项目




三、数据库
ShipAny 目前使用 Supabase 作为数据库。用于存储登录用户 / 支付订单等数据。

其他数据库，如 MySQL / PostgreSQL 等，后续会逐步支持。

为完整运行 ShipAny 的功能，请参考以下步骤配置数据库。

数据库配置
登录 Supabase 官网，创建一个 Supabase 数据库实例

进入创建好的 Supabase 数据库实例，获取 API 访问凭证

supabase-api

填写环境配置文件里面的数据库配置信息
你可以为开发环境 / 生产环境创建不同的 Supabase 数据库实例，分别填入到 .env.development 和 .env.production 文件中。

.env.development

SUPABASE_URL = "https://xxx.supabase.co"
SUPABASE_ANON_KEY = "eyxxx.eyxxx.qhxxx"
SUPABASE_ANON_KEY 和 SUPABASE_SERVICE_ROLE_KEY 二选一填写。为了数据安全性，建议在生产环境使用 SUPABASE_SERVICE_ROLE_KEY。

.env.production

SUPABASE_URL = "https://xxx.supabase.co"
SUPABASE_SERVICE_ROLE_KEY = "eyxxx.eyxxx.qhxxx"
创建数据表
复制 ShipAny 模板代码下 data/install.sql 里面的 SQL 语句
data/install.sql

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    uuid VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) NOT NULL,
    created_at timestamptz,
    nickname VARCHAR(255),
    avatar_url VARCHAR(255),
    locale VARCHAR(50),
    signin_type VARCHAR(50),
    signin_ip VARCHAR(255),
    signin_provider VARCHAR(50),
    signin_openid VARCHAR(255),
    UNIQUE (email, signin_provider)
);
 
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    order_no VARCHAR(255) UNIQUE NOT NULL,
    created_at timestamptz,
    user_uuid VARCHAR(255) NOT NULL DEFAULT '',
    user_email VARCHAR(255) NOT NULL DEFAULT '',
    amount INT NOT NULL,
    interval VARCHAR(50),
    expired_at timestamptz,
    status VARCHAR(50) NOT NULL,
    stripe_session_id VARCHAR(255),
    credits INT NOT NULL,
    currency VARCHAR(50),
    sub_id VARCHAR(255),
    sub_interval_count int,
    sub_cycle_anchor int,
    sub_period_end int,
    sub_period_start int,
    sub_times int,
    product_id VARCHAR(255),
    product_name VARCHAR(255),
    valid_months int,
    order_detail TEXT,
    paid_at timestamptz,
    paid_email VARCHAR(255),
    paid_detail TEXT
);
在 Supabase 实例运行 SQL 语句，创建数据表
supabase-run

等配置好用户登录和支付功能后，用户数据和支付数据就会自动写入 users 和 orders 表中。

可以在 Supabase 实例控制台管理相关数据。

数据 CURD
可以参考 ShipAny 模板下 models 目录下 user.ts 和 order.ts 操作数据的逻辑。

使用 @supabase/supabase-js SDK 实现数据增删改查。

models/user.ts

import { User } from "@/types/user";
import { getSupabaseClient } from "./db";
 
export async function insertUser(user: User) {
  const supabase = getSupabaseClient();
  const { data, error } = await supabase.from("users").insert(user);
 
  if (error) {
    throw error;
  }
 
  return data;
}
 
export async function findUserByEmail(
  email: string,
  signin_provider: string
): Promise<User | undefined> {
  const supabase = getSupabaseClient();
  const { data, error } = await supabase
    .from("users")
    .select("*")
    .eq("email", email)
    .eq("signin_provider", signin_provider)
    .single();
 
  if (error) {
    return undefined;
  }
 
  return data;
}

四、文件存储
ShipAny 支持上传文件到 AWS S3 兼容的文件存储系统，例如 AWS S3 / Cloudflare R2 / 腾讯云 COS 等。

配置云存储
选择你的云存储平台，创建存储桶，设置访问密钥和访问域名。

然后把相关参数填写到项目的配置文件中：

.env

STORAGE_ENDPOINT = ""
STORAGE_REGION = ""
STORAGE_ACCESS_KEY = ""
STORAGE_SECRET_KEY = ""
STORAGE_BUCKET = ""
STORAGE_DOMAIN = ""
上传 AI 图片到云存储
把 aisdk 生成的图片（返回的 base64 数据），上传到云存储。

app/api/demo/gen-image/route.ts

import { newStorage } from "@/lib/storage";
 
const storage = new Storage();
 
const filename = `image_${new Date().getTime()}.png`;
const key = `shipany/${filename}`;
const body = Buffer.from(image.base64, "base64");
 
try {
  const res = await storage.uploadFile({
    body,
    key,
    contentType: "image/png",
    disposition: "inline",
  });
 
  console.log("upload file success:", res);
} catch (err) {
  console.log("upload file failed:", err);
}
uploadFile 接收的 body 参数是 Buffer 类型。你可以传递从 URL 下载的文件 Buffer 或者从本地文件读取的 Buffer。

读取本地文件上传到云存储
app/api/demo/gen-image/route.ts

import path from "path";
import { readFile } from "fs/promises";
import { newStorage } from "@/lib/storage";
 
const storage = newStorage();
 
const content = await readFile(path.join(process.cwd(), "sing.m4a"));
 
const res = await storage.uploadFile({
  body: content,
  key: `shipany/sing_${getUuid()}.mp3`,
  contentType: "audio/mpeg",
});
注意：path 和 readFile 在 edge runtime 中无法使用，所以在 cloudflare 部署时，不能读取本地文件。

下载远程图片上传到云存储
给定一个远程的图片地址，下载图片并上传到云存储。

app/api/demo/gen-image/route.ts

import { newStorage } from "@/lib/storage";
 
const storage = newStorage();
 
const res = await storage.downloadAndUpload({
  url: "https://shipany.ai/logo.png",
  key: `shipany/logo.png`,
});


五、图片生成
ShipAny 使用 ai-sdk（https://sdk.vercel.ai/docs/introduction） 作为基础库，结合自定义的 Provider，支持了市面上主流的图片生成模型。

使用 OpenAI 的图片模型
使用 OpenAI 的 dall-e-3 模型生成图片：

需要先在 OpenAI Platform 充值，并创建 API Key。

设置环境变量
.env.development

OPENAI_BASE_URL = "https://api.openai.com/v1"
OPENAI_API_KEY = "sk-xxx"
生成图片
providerOptions.openai 支持的参数，参考 OpenAI Image Generation 接口文档

app/api/demo/gen-image/route.ts

import { experimental_generateImage as generateImage } from "ai";
import { openai } from "@ai-sdk/openai";
 
const prompt = "a beautiful girl running with 2 cats";
const model = "dall-e-3";
 
const imageModel = openai.image(model);
const providerOptions = {
  openai: {
    quality: "hd",
    style: "natural",
  },
};
 
const { images, warnings } = await generateImage({
  model: imageModel,
  prompt: prompt,
  n: 1,
  providerOptions,
});
预览效果
openai-image

使用 Replicate 上的图片模型
需要先在 Replicate 上绑定信用卡，并创建 API Token。

设置环境变量
.env.development

REPLICATE_API_TOKEN = "r8_xxx"
生成图片
在 Replicate 模型广场 选择一个图片生成模型，复制模型名称。

providerOptions.replicate 支持的参数，参考选择模型的 API 文档

app/api/demo/gen-image/route.ts

import { experimental_generateImage as generateImage } from "ai";
import { replicate } from "@ai-sdk/replicate";
 
const prompt = "a beautiful girl running with 2 cats";
const model = "black-forest-labs/flux-1.1-pro";
 
const imageModel = replicate.image(model);
const providerOptions = {
  replicate: {
    output_quality: 90,
  },
};
 
const { images, warnings } = await generateImage({
  model: imageModel,
  prompt: prompt,
  n: 1,
  providerOptions,
});
预览效果
replicate-image

使用 Kling AI 的图片模型
需要先在 Kling AI 充值 Image Generation API，并 创建 API Key。

设置环境变量
.env.development

KLING_ACCESS_KEY = "xxx"
KLING_SECRET_KEY = "xxx"
生成图片
注意，这里使用的是 ShipAny 自定义的 Provider：import { kling } from "@/aisdk/kling";，跟 @ai-sdk 下的 Provider 导入路径有差异。

providerOptions.kling 支持的参数，参考 Kling Image Generation API 文档

app/api/demo/gen-image/route.ts

import { experimental_generateImage as generateImage } from "ai";
import { kling } from "@/aisdk/kling";
 
const prompt = "a beautiful girl running with 2 cats";
const model = "kling-v1";
 
const imageModel = kling.image(model);
const providerOptions = {
  kling: {},
};
 
const { images, warnings } = await generateImage({
  model: imageModel,
  prompt: prompt,
  n: 1,
  providerOptions,
});
预览效果
kling-image

保存图片到本地文件
通过 generateImage 生成的图片，是 base64 编码的字符串数组。

你可以参考下面的代码，将图片内容保存到本地文件。

app/api/demo/gen-image/route.ts

const { images, warnings } = await generateImage({
  model: imageModel,
  prompt: prompt,
  n: 1,
  providerOptions,
});
 
if (warnings.length > 0) {
  console.log("gen images warnings:", provider, warnings);
  return respErr("gen images failed");
}
 
const batch = getUuid();
 
const processedImages = await Promise.all(
  images.map(async (image, index) => {
    const fileName = `${provider}_image_${batch}_${index}.png`;
    const filePath = path.join(process.cwd(), ".tmp", fileName);
 
    const buffer = Buffer.from(image.base64, "base64");
    await writeFile(filePath, buffer);
 
    return {
      provider,
      fileName,
      filePath,
    };
  })
);
参考
ai-sdk generateImage
OpenAI Image Generation
Kling AI Documentation
Replicate Docs


六、国际化
ShipAny 使用 next-intl 默认支持国际化。只需要简单的配置，即可开启。

项目国际化
项目国际化，包括 ShipAny 项目启动后看到的页面 title，SEO 信息，登陆框文案等。

在 i18n/messages 目录下，通过 [locale].json 文件配置页面内容，默认支持中文和英文，在 i18n/messages/ 目录下，可以看到 en.json 和 zh.json 两个文件，在项目发布之前，修改成跟你项目相符合的文案即可。

可以让 AI 辅助生成内容：

Prompt

update content of this file, for my new project "Flux AI", which is an AI Image Generator, with keywords "flux ai, ai image generator"
i18n-message

落地页国际化
落地页的内容，在 i18n/pages/landing 目录下，通过 [locale].json 文件进行配置。

默认支持 en.json 和 zh.json 两个文件，在项目发布之前，修改成跟你项目相符合的文案即可。

参考 Prompt：

Prompt

I want to build a landing page for my product named "Flux AI Image Generator", please update the landing page json file, content reference @Web @https://www.flux.ai/
update-landing

支持更多语言
除了默认的 en 和 zh 外，如果你还需要支持更多的语言，比如日语：ja，韩语：ko，法语：fr等，你可以按照以下步骤进行多语言配置：

在 i18n/messages 目录和 i18n/pages/landing 目录下，添加对应的语言文件，比如 ja.json 和 ko.json， fr.json 等。

修改 i18n/locale.ts 文件，添加更多语言支持

i18n-locales

修改 middleware.ts 文件，添加更多语言支持
i18n-mid

预览网页，可以看到新的语言已经支持
i18n-preview

参考
next-intl